import { type NextRequest, NextResponse } from "next/server"

interface TelegramInvoiceRequest {
  transactionId: string
  packageName: string
  packagePrice: number
  packageDuration: number
  userEmail: string
  telegramUsername: string
}

export async function POST(request: NextRequest) {
  try {
    const body: TelegramInvoiceRequest = await request.json()
    const { transactionId, packageName, packagePrice, packageDuration, userEmail, telegramUsername } = body

    const botToken = process.env.TELEGRAM_BOT_TOKEN
    if (!botToken) {
      return NextResponse.json({ error: "Telegram bot token not configured" }, { status: 500 })
    }

    // Format duration in Bengali
    const formatDuration = (days: number) => {
      if (days === 365) return "рзз ржмржЫрж░"
      if (days === 30) return "рзйрзж ржжрж┐ржи"
      if (days === 7) return "рзн ржжрж┐ржи"
      return `${days} ржжрж┐ржи`
    }

    const invoiceMessage = `
ЁЯОп **ржирждрзБржи ржЕрж░рзНржбрж╛рж░ рж░рж┐ржХрзЛржпрж╝рзЗрж╕рзНржЯ**

ЁЯУж **ржкрзНржпрж╛ржХрзЗржЬ:** ${packageName}
ЁЯТ░ **ржорзВрж▓рзНржп:** рз│${packagePrice}
тП░ **рж╕ржоржпрж╝ржХрж╛рж▓:** ${formatDuration(packageDuration)}
ЁЯУз **ржЗржорзЗржЗрж▓:** ${userEmail}
ЁЯСд **Telegram:** @${telegramUsername}
ЁЯЖФ **ржЕрж░рзНржбрж╛рж░ ID:** \`${transactionId}\`

---
ЁЯТ│ **ржкрзЗржорзЗржирзНржЯ ржЕржкрж╢ржи:**
ЁЯПж **bKash Personal:** 01XXXXXXXXX
ЁЯТ╕ **Nagad Personal:** 01XXXXXXXXX
ЁЯПк **Rocket:** 01XXXXXXXXX-X
ЁЯПж **Bank Transfer:** Dutch-Bangla Bank
   **Account:** XXXXXXXXXX
   **Routing:** XXXXXXXXX

ЁЯУ▒ **WhatsApp рж╕рж╛ржкрзЛрж░рзНржЯ:** +8801XXXXXXXXX

тЪая╕П **ржЧрзБрж░рзБрждрзНржмржкрзВрж░рзНржг ржирж┐рж░рзНржжрзЗрж╢ржирж╛:**
тАв ржкрзЗржорзЗржирзНржЯ рж╕ржорзНржкржирзНржи рж╣рж▓рзЗ ржЕрж░рзНржбрж╛рж░ ID рж╕рж╣ рж╕рзНржХрзНрж░рж┐ржирж╢ржЯ ржкрж╛ржарж╛ржи
тАв рзирзк ржШржирзНржЯрж╛рж░ ржоржзрзНржпрзЗ ржЕрзНржпрж╛ржХрж╛ржЙржирзНржЯ ржЕрзНржпрж╛ржХрзНржЯрж┐ржн рж╣ржмрзЗ
тАв ржХрзЛржи рж╕ржорж╕рзНржпрж╛ рж╣рж▓рзЗ рж╕рж╛ржкрзЛрж░рзНржЯрзЗ ржпрзЛржЧрж╛ржпрзЛржЧ ржХрж░рзБржи

тЬЕ **ржЕрж░рзНржбрж╛рж░ рж╕рзНржЯрзНржпрж╛ржЯрж╛рж╕:** ржЕржкрзЗржХрзНрж╖ржорж╛ржи
    `.trim()

    const contactMessage = `
ЁЯОЙ **ржЖржкржирж╛рж░ ржЕрж░рзНржбрж╛рж░ рж╕ржлрж▓ржнрж╛ржмрзЗ ржЧрзГрж╣рзАржд рж╣ржпрж╝рзЗржЫрзЗ!**

ЁЯУж **ржкрзНржпрж╛ржХрзЗржЬ:** ${packageName}
ЁЯТ░ **ржорзВрж▓рзНржп:** рз│${packagePrice}
тП░ **рж╕ржоржпрж╝ржХрж╛рж▓:** ${formatDuration(packageDuration)}
ЁЯЖФ **ржЕрж░рзНржбрж╛рж░ ID:** \`${transactionId}\`

ЁЯТ│ **ржкрзЗржорзЗржирзНржЯ ржХрж░рж╛рж░ ржирж┐ржпрж╝ржо:**
1я╕ПтГг ржирж┐ржЪрзЗрж░ ржпрзЗржХрзЛржирзЛ ржорж╛ржзрзНржпржорзЗ ржкрзЗржорзЗржирзНржЯ ржХрж░рзБржи
2я╕ПтГг ржкрзЗржорзЗржирзНржЯ рж╕рзНржХрзНрж░рж┐ржирж╢ржЯ ржирж┐ржи
3я╕ПтГг ржЕрж░рзНржбрж╛рж░ ID рж╕рж╣ ржЖржорж╛ржжрзЗрж░ ржкрж╛ржарж╛ржи

ЁЯПж **ржкрзЗржорзЗржирзНржЯ ржЕржкрж╢ржи:**
тАв **bKash:** 01XXXXXXXXX (Personal)
тАв **Nagad:** 01XXXXXXXXX (Personal)
тАв **Rocket:** 01XXXXXXXXX-X

тП░ **ржЕрзНржпрж╛ржХрзНржЯрж┐ржнрзЗрж╢ржи:** рзирзД ржШржирзНржЯрж╛рж░ ржоржзрзНржпрзЗ
ЁЯФТ **ржирж┐рж░рж╛ржкрждрзНрждрж╛:** рззрзжрзж% ржирж┐рж░рж╛ржкржж ржУ ржПржиржХрзНрж░рж┐ржкрзНржЯрзЗржб

тЭУ **рж╕рж╛рж╣рж╛ржпрзНржп ржкрзНрж░ржпрж╝рзЛржЬржи?** ржирж┐ржЪрзЗрж░ ржмрж╛ржЯржирзЗ ржХрзНрж▓рж┐ржХ ржХрж░рзБржи ЁЯСЗ
    `.trim()

    // Get admin chat IDs
    const adminChatId = process.env.TELEGRAM_ADMIN_CHAT_ID || process.env.TELEGRAM_CHAT_ID
    const supportUsername = process.env.TELEGRAM_SUPPORT_USERNAME || "support"

    if (adminChatId) {
      const adminResponse = await fetch(`https://api.telegram.org/bot${botToken}/sendMessage`, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          chat_id: adminChatId,
          text: invoiceMessage,
          parse_mode: "Markdown",
          reply_markup: {
            inline_keyboard: [
              [
                {
                  text: `ЁЯТм Contact @${telegramUsername}`,
                  url: `https://t.me/${telegramUsername}`,
                },
                {
                  text: "ЁЯУз Send Email",
                  url: `mailto:${userEmail}?subject=Order ${transactionId}&body=Hello, regarding your order...`,
                },
              ],
              [
                {
                  text: "тЬЕ Mark as Paid",
                  callback_data: `mark_paid_${transactionId}`,
                },
                {
                  text: "тЭМ Cancel Order",
                  callback_data: `cancel_order_${transactionId}`,
                },
              ],
            ],
          },
        }),
      })

      if (!adminResponse.ok) {
        console.error("Failed to send admin message:", await adminResponse.text())
      }
    }

    // Try to send message to user
    try {
      // First, try to get user info by username
      const userInfoResponse = await fetch(`https://api.telegram.org/bot${botToken}/getChat`, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          chat_id: `@${telegramUsername}`,
        }),
      })

      if (userInfoResponse.ok) {
        const userInfo = await userInfoResponse.json()

        await fetch(`https://api.telegram.org/bot${botToken}/sendMessage`, {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({
            chat_id: userInfo.result.id,
            text: contactMessage,
            parse_mode: "Markdown",
            reply_markup: {
              inline_keyboard: [
                [
                  {
                    text: "ЁЯТм Contact Support",
                    url: `https://t.me/${supportUsername}`,
                  },
                  {
                    text: "ЁЯУ▒ WhatsApp Support",
                    url: "https://wa.me/8801XXXXXXXXX",
                  },
                ],
                [
                  {
                    text: "ЁЯТ│ bKash Payment Guide",
                    url: "https://www.bkash.com/how-to-send-money",
                  },
                  {
                    text: "ЁЯТ╕ Nagad Payment Guide",
                    url: "https://www.nagad.com.bd/send-money/",
                  },
                ],
                [
                  {
                    text: "ЁЯУЛ Check Order Status",
                    callback_data: `check_status_${transactionId}`,
                  },
                ],
              ],
            },
          }),
        })
      }
    } catch (error) {
      console.error("Error sending user message:", error)
      // Don't fail the request if user message fails
    }

    return NextResponse.json({
      success: true,
      message: "Invoice sent successfully",
      transactionId,
      adminNotified: !!adminChatId,
    })
  } catch (error) {
    console.error("Telegram API error:", error)
    return NextResponse.json({ error: "Failed to send invoice" }, { status: 500 })
  }
}
